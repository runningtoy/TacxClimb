
#include <M5Core2.h>

typedef enum ICON{
  ICO_NONE,
  ICO_DELETE,
  ICO_WIFI,
  ICO_BLE,
  ICO_MQTT,
  ICO_CHECK,
  ICO_FAIL,
  ICO_FILE,
  ICO_LIFTER
};


//https://www.mischianti.org/2021/07/14/ssd1306-oled-display-draw-images-splash-and-animations-2/#Image_format


//https://www.thisisant.com/company/activity-icons/
//https://www.freefileconvert.com/bmp-xbm


#define fec_Icon_width 40
#define fec_Icon_height 40
PROGMEM const unsigned char fec_Icon_bits[] = {
  0xFC, 0xFF, 0xFF, 0xFF, 0x3F, 0xFE, 0xFF, 0xFF, 0xFF, 0x7F, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xC7, 0xFF, 0xFF, 0xFF, 0xFF, 0x83, 
  0xFF, 0xFF, 0xFF, 0xFF, 0x87, 0xFF, 0xFF, 0xFF, 0xFF, 0xC7, 0xFF, 0xFF, 
  0xFF, 0x7F, 0xFC, 0xFF, 0xFF, 0xFF, 0x1F, 0xF8, 0xFF, 0xFF, 0xFF, 0x8F, 
  0xB3, 0xFF, 0xFF, 0xFF, 0xE7, 0x07, 0xFF, 0xFF, 0xFF, 0xE3, 0xDF, 0xFF, 
  0xFF, 0xFF, 0xE7, 0xFF, 0xFF, 0xFF, 0xFF, 0x8F, 0xFF, 0xFF, 0xFF, 0x87, 
  0x1F, 0x07, 0xFF, 0xFF, 0x03, 0x3E, 0x03, 0xFE, 0xFF, 0xF9, 0x3C, 0xF9, 
  0xFC, 0xFF, 0xFC, 0x9C, 0xF9, 0xF9, 0xFF, 0xFC, 0x9D, 0xFD, 0xF9, 0xFF, 
  0xCC, 0xDC, 0xFC, 0xF9, 0xFF, 0x84, 0xCC, 0xFD, 0xF9, 0xFF, 0x01, 0xCC, 
  0xF9, 0xFC, 0xFF, 0x01, 0xE6, 0x63, 0xFC, 0xFF, 0x01, 0xFE, 0x07, 0xFF, 
  0xFF, 0x00, 0xFC, 0xFF, 0xFF, 0x7F, 0x00, 0xF8, 0xFF, 0xFF, 0x3F, 0x00, 
  0xF0, 0xFF, 0xFF, 0x3F, 0x00, 0xE0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x5F, 
  0x32, 0xF3, 0x4F, 0xFE, 0x1F, 0x10, 0xF0, 0x03, 0xFC, 0x9F, 0x9F, 0xFF, 
  0xE3, 0xF8, 0x1F, 0x10, 0xF0, 0xF3, 0xFF, 0x1F, 0x10, 0x1D, 0xF2, 0xFD, 
  0x9F, 0x1F, 0xF2, 0x03, 0xF8, 0x9F, 0x1F, 0xE0, 0x07, 0xFC, 0xFE, 0xFF, 
  0xFF, 0xFF, 0xFF, 0xFC, 0xFF, 0xFF, 0xFF, 0x3F, };





//https://diyprojects.io/ttgo-t-watch-display-xbm-tft_espi-lvgl-images-esp32-arduino/
#define wifiLogo32_width 32
#define wifiLogo32_height 22
PROGMEM const unsigned char wifiLogo32_bits[] = {
  0x00, 0xF8, 0x1F, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0xE0, 0xFF, 0xFF, 0x07, 
  0xF0, 0xFF, 0xFF, 0x0F, 0xFC, 0x07, 0xE0, 0x3F, 0xFE, 0x00, 0x00, 0x7F, 
  0x3F, 0x00, 0x00, 0xFC, 0x1E, 0x80, 0x01, 0x78, 0x04, 0xFC, 0x3F, 0x30, 
  0x00, 0xFF, 0xFF, 0x00, 0x80, 0xFF, 0xFF, 0x01, 0xC0, 0x1F, 0xF8, 0x03, 
  0xC0, 0x03, 0xC0, 0x03, 0x80, 0x01, 0x80, 0x01, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0xE0, 0x07, 0x00, 0x00, 0xF8, 0x1F, 0x00, 0x00, 0xF8, 0x1F, 0x00, 
  0x00, 0xF0, 0x0F, 0x00, 0x00, 0xE0, 0x07, 0x00, 0x00, 0xC0, 0x01, 0x00, 
  0x00, 0x00, 0x01, 0x00, };


#define delete_width 64
#define delete_height 64
PROGMEM const unsigned char delete_bits[] = {
  0x00, 0x00, 0x00, 0x00, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0xFC, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFE, 0x0F, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0xFF, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
  0xFF, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0xFF, 0x7F, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0xE0, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 
  0xFF, 0xFF, 0x01, 0x00, 0x00, 0x00, 0x00, 0xF8, 0xFF, 0xFF, 0x03, 0x00, 
  0x00, 0x00, 0x00, 0xFC, 0xFF, 0xFF, 0x07, 0x00, 0x00, 0x00, 0x00, 0xFE, 
  0xFF, 0xFF, 0x0F, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x1F, 0x00, 
  0x00, 0x00, 0x80, 0xFF, 0xFF, 0xFF, 0x3F, 0x00, 0x00, 0x00, 0xC0, 0xFF, 
  0xFF, 0xFF, 0x7F, 0x00, 0x00, 0x00, 0xE0, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 
  0x00, 0x00, 0xF0, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0x00, 0x00, 0xF8, 0xFF, 
  0xFF, 0xFF, 0xFF, 0x03, 0x00, 0x00, 0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0x07, 
  0x00, 0x00, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0x0F, 0x00, 0x00, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xFF, 0x1F, 0x00, 0x80, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x3F, 
  0x00, 0xC0, 0xFF, 0xFD, 0xFF, 0xFF, 0xFF, 0x3F, 0x00, 0xE0, 0xFF, 0xF8, 
  0xFF, 0xFF, 0xFF, 0x7F, 0x00, 0xF0, 0x7F, 0xF0, 0xFF, 0xFF, 0xFF, 0x7F, 
  0x00, 0xF8, 0x3F, 0xE0, 0xFF, 0xFF, 0xFF, 0x7F, 0x00, 0xFC, 0x1F, 0xC0, 
  0xFF, 0xFF, 0xFF, 0x7F, 0x00, 0xFE, 0x0F, 0x80, 0xFF, 0xFF, 0xFF, 0x7F, 
  0x00, 0xFF, 0x07, 0x00, 0xFF, 0xFF, 0xFF, 0x7F, 0x80, 0xFF, 0x03, 0x00, 
  0xFE, 0xFF, 0xFF, 0x3F, 0xC0, 0xFF, 0x01, 0x00, 0xFC, 0xFF, 0xFF, 0x3F, 
  0xE0, 0xFF, 0x00, 0x00, 0xF8, 0xFF, 0xFF, 0x1F, 0xF0, 0x7F, 0x00, 0x00, 
  0xF0, 0xFF, 0xFF, 0x0F, 0xF8, 0x3F, 0x00, 0x00, 0xE0, 0xFF, 0xFF, 0x07, 
  0xFC, 0x1F, 0x00, 0x00, 0xC0, 0xFF, 0xFF, 0x03, 0xFC, 0x0F, 0x00, 0x00, 
  0x80, 0xFF, 0xFF, 0x01, 0xFE, 0x07, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 
  0xFE, 0x03, 0x00, 0x00, 0x00, 0xFE, 0x7F, 0x00, 0xFE, 0x01, 0x00, 0x00, 
  0x00, 0xFC, 0x3F, 0x00, 0xFE, 0x01, 0x00, 0x00, 0x00, 0xFC, 0x1F, 0x00, 
  0xFE, 0x03, 0x00, 0x00, 0x00, 0xFE, 0x0F, 0x00, 0xFE, 0x07, 0x00, 0x00, 
  0x00, 0xFF, 0x07, 0x00, 0xFC, 0x0F, 0x00, 0x00, 0x80, 0xFF, 0x03, 0x00, 
  0xF8, 0x1F, 0x00, 0x00, 0xC0, 0xFF, 0x01, 0x00, 0xF0, 0x3F, 0x00, 0x00, 
  0xE0, 0xFF, 0x00, 0x00, 0xE0, 0x7F, 0x00, 0x00, 0xF0, 0x7F, 0x00, 0x00, 
  0xC0, 0xFF, 0x00, 0x00, 0xF8, 0x3F, 0x00, 0x00, 0x80, 0xFF, 0x01, 0x00, 
  0xFC, 0x1F, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x0F, 0x00, 0x00, 
  0x00, 0xFE, 0xFF, 0xFF, 0xFF, 0x07, 0x00, 0x00, 0x00, 0xFC, 0xFF, 0xFF, 
  0xFF, 0x03, 0x00, 0x00, 0x00, 0xF8, 0xFF, 0xFF, 0xFF, 0x01, 0x00, 0x00, 
  0x00, 0xF0, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xE0, 0xFF, 0xFF, 
  0x7F, 0x00, 0x00, 0x00, 0x00, 0xC0, 0xFF, 0xFF, 0x3F, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, };

#define wifi64_width 64
#define wifi64_height 64
PROGMEM const unsigned char wifi64_bits[] = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0xFE, 0x7F, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0xFF, 
  0xFF, 0x0F, 0x00, 0x00, 0x00, 0x00, 0xFE, 0xFF, 0xFF, 0x7F, 0x00, 0x00, 
  0x00, 0xC0, 0xFF, 0xFF, 0xFF, 0xFF, 0x03, 0x00, 0x00, 0xF0, 0xFF, 0xFF, 
  0xFF, 0xFF, 0x0F, 0x00, 0x00, 0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0x3F, 0x00, 
  0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0xC0, 0xFF, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xFF, 0x03, 0xE0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x07, 
  0xF0, 0xFF, 0xFF, 0x01, 0x80, 0xFF, 0xFF, 0x0F, 0xF8, 0xFF, 0x3F, 0x00, 
  0x00, 0xFC, 0xFF, 0x1F, 0xFC, 0xFF, 0x03, 0x00, 0x00, 0xC0, 0xFF, 0x3F, 
  0xFF, 0xFF, 0x00, 0xF0, 0x0F, 0x00, 0xFF, 0xFF, 0xFF, 0x7F, 0x80, 0xFF, 
  0xFF, 0x01, 0xFE, 0xFF, 0xFF, 0x1F, 0xF8, 0xFF, 0xFF, 0x1F, 0xF8, 0xFF, 
  0xFF, 0x07, 0xFE, 0xFF, 0xFF, 0x7F, 0xE0, 0xFF, 0xFE, 0x03, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xC0, 0x7F, 0xFC, 0xC1, 0xFF, 0xFF, 0xFF, 0xFF, 0x83, 0x3F, 
  0xF8, 0xF0, 0xFF, 0xFF, 0xFF, 0xFF, 0x0F, 0x1F, 0x30, 0xF8, 0xFF, 0xFF, 
  0xFF, 0xFF, 0x1F, 0x0C, 0x00, 0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0x3F, 0x00, 
  0x00, 0xFE, 0xFF, 0x0F, 0xF0, 0xFF, 0x7F, 0x00, 0x00, 0xFF, 0xFF, 0x00, 
  0x00, 0xFF, 0xFF, 0x00, 0x00, 0xFF, 0x3F, 0x00, 0x00, 0xFC, 0xFF, 0x00, 
  0x00, 0xFE, 0x0F, 0x80, 0x01, 0xF0, 0x7F, 0x00, 0x00, 0xFC, 0x03, 0xFE, 
  0x7F, 0xC0, 0x3F, 0x00, 0x00, 0xF8, 0x81, 0xFF, 0xFF, 0x81, 0x1F, 0x00, 
  0x00, 0xF0, 0xE0, 0xFF, 0xFF, 0x07, 0x0F, 0x00, 0x00, 0x00, 0xF8, 0xFF, 
  0xFF, 0x1F, 0x00, 0x00, 0x00, 0x00, 0xFC, 0xFF, 0xFF, 0x3F, 0x00, 0x00, 
  0x00, 0x00, 0xFE, 0xFF, 0xFF, 0x7F, 0x00, 0x00, 0x00, 0x00, 0xFE, 0xFF, 
  0xFF, 0x7F, 0x00, 0x00, 0x00, 0x00, 0xFE, 0xFF, 0xFF, 0x7F, 0x00, 0x00, 
  0x00, 0x00, 0xFC, 0xFF, 0xFF, 0x3F, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x07, 
  0xE0, 0x1F, 0x00, 0x00, 0x00, 0x00, 0xF0, 0x03, 0xC0, 0x0F, 0x00, 0x00, 
  0x00, 0x00, 0xE0, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0x0F, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0xF8, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFC, 
  0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x1F, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0xF0, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 
  0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x03, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x80, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, };

#define BLE64_width 64
#define BLE64_height 64
PROGMEM const unsigned char BLE64_bits[] = {
  0x00, 0x00, 0x00, 0xF0, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 
  0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x0F, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0xF8, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 
  0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x7F, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0xF8, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 
  0xFF, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0xFF, 0x07, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0xF8, 0xFF, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 
  0xFF, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0xFB, 0x3F, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0xF8, 0xE3, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 
  0xC3, 0xFF, 0x01, 0x00, 0x00, 0x80, 0x01, 0xF8, 0x83, 0xFF, 0x03, 0x00, 
  0x00, 0xE0, 0x07, 0xF8, 0x03, 0xFF, 0x07, 0x00, 0x00, 0xE0, 0x0F, 0xF8, 
  0x03, 0xFE, 0x07, 0x00, 0x00, 0xE0, 0x1F, 0xF8, 0x03, 0xFC, 0x07, 0x00, 
  0x00, 0xE0, 0x3F, 0xF8, 0x03, 0xFE, 0x07, 0x00, 0x00, 0xE0, 0x7F, 0xF8, 
  0x03, 0xFF, 0x07, 0x00, 0x00, 0xC0, 0xFF, 0xF8, 0x83, 0xFF, 0x03, 0x00, 
  0x00, 0x80, 0xFF, 0xF9, 0xC3, 0xFF, 0x01, 0x00, 0x00, 0x00, 0xFF, 0xFB, 
  0xF3, 0x7F, 0x00, 0x00, 0x00, 0x00, 0xFE, 0xFF, 0xFB, 0x3F, 0x00, 0x00, 
  0x00, 0x00, 0xFC, 0xFF, 0xFF, 0x1F, 0x00, 0x00, 0x00, 0x00, 0xF8, 0xFF, 
  0xFF, 0x0F, 0x00, 0x00, 0x00, 0x00, 0xF0, 0xFF, 0xFF, 0x07, 0x00, 0x00, 
  0x00, 0x00, 0xE0, 0xFF, 0xFF, 0x01, 0x00, 0x00, 0x00, 0x00, 0xC0, 0xFF, 
  0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xFF, 0x7F, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0xFF, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFE, 
  0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFE, 0x1F, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0xFF, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xFF, 
  0x7F, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0xFF, 0xFF, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0xE0, 0xFF, 0xFF, 0x01, 0x00, 0x00, 0x00, 0x00, 0xF0, 0xFF, 
  0xFF, 0x07, 0x00, 0x00, 0x00, 0x00, 0xF8, 0xFF, 0xFF, 0x0F, 0x00, 0x00, 
  0x00, 0x00, 0xFC, 0xFF, 0xFF, 0x1F, 0x00, 0x00, 0x00, 0x00, 0xFE, 0xFF, 
  0xFB, 0x3F, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFB, 0xF3, 0x7F, 0x00, 0x00, 
  0x00, 0x80, 0xFF, 0xF9, 0xC3, 0xFF, 0x01, 0x00, 0x00, 0xC0, 0xFF, 0xF8, 
  0x83, 0xFF, 0x03, 0x00, 0x00, 0xE0, 0x7F, 0xF8, 0x03, 0xFF, 0x07, 0x00, 
  0x00, 0xE0, 0x3F, 0xF8, 0x03, 0xFE, 0x07, 0x00, 0x00, 0xE0, 0x1F, 0xF8, 
  0x03, 0xFC, 0x07, 0x00, 0x00, 0xE0, 0x0F, 0xF8, 0x03, 0xFE, 0x07, 0x00, 
  0x00, 0xE0, 0x07, 0xF8, 0x03, 0xFF, 0x07, 0x00, 0x00, 0x80, 0x01, 0xF8, 
  0x83, 0xFF, 0x03, 0x00, 0x00, 0x00, 0x00, 0xF8, 0xC3, 0xFF, 0x01, 0x00, 
  0x00, 0x00, 0x00, 0xF8, 0xE3, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 
  0xFB, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0xFF, 0x1F, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0xF8, 0xFF, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 
  0xFF, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0xFF, 0x03, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0xF8, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 
  0x7F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x3F, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0xF8, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 
  0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x03, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0xF0, 0x01, 0x00, 0x00, 0x00, };

#define check_width 64
#define check_height 64
PROGMEM const unsigned char check_bits[] = {
  0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0xFF, 
  0xFF, 0x07, 0x00, 0x00, 0x00, 0x00, 0xFC, 0xFF, 0xFF, 0x3F, 0x00, 0x00, 
  0x00, 0x00, 0xFE, 0xFF, 0xFF, 0x7F, 0x00, 0x00, 0x00, 0x80, 0xFF, 0xFF, 
  0xFF, 0xFF, 0x01, 0x00, 0x00, 0xE0, 0xFF, 0xFF, 0xFF, 0xFF, 0x07, 0x00, 
  0x00, 0xF0, 0xFF, 0xFF, 0xFF, 0xFF, 0x0F, 0x00, 0x00, 0xF8, 0xFF, 0xFF, 
  0xFF, 0xFF, 0x1F, 0x00, 0x00, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0x00, 
  0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xFF, 0x00, 0x80, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 
  0xC0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x03, 0xE0, 0xFF, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xFF, 0x07, 0xE0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x07, 
  0xF0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x0F, 0xF0, 0xFF, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xFF, 0x0F, 0xF8, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x1F, 
  0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x3F, 0xFC, 0xFF, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xFF, 0x3F, 0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x3F, 
  0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0x9F, 0xFF, 0x7F, 0xFE, 0xFF, 0xFF, 0xFF, 
  0xFF, 0x0F, 0xFF, 0x7F, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0x07, 0xFE, 0x7F, 
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x03, 0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
  0xFF, 0x01, 0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0xFE, 0xFF, 
  0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xF7, 0xFF, 
  0x3F, 0x80, 0xFF, 0xFF, 0xFF, 0xFF, 0xE3, 0xFF, 0x1F, 0xC0, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xC1, 0xFF, 0x0F, 0xE0, 0xFF, 0xFF, 0xFF, 0xFF, 0x80, 0xFF, 
  0x03, 0xF0, 0xFF, 0xFF, 0xFF, 0x7F, 0x00, 0xFF, 0x01, 0xF8, 0xFF, 0xFF, 
  0xFF, 0xFF, 0x00, 0xFE, 0x00, 0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0x7C, 
  0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x03, 0x38, 0x80, 0xFF, 0xFF, 0xFF, 
  0xFF, 0xFF, 0x07, 0x10, 0xC0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x0F, 0x00, 
  0xE0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x1F, 0x00, 0xF0, 0xFF, 0xFF, 0xFF, 
  0xFF, 0xFF, 0x3F, 0x00, 0xF8, 0xFF, 0xFF, 0xFF, 0xFE, 0xFF, 0x7F, 0x00, 
  0xFC, 0xFF, 0xFF, 0x7F, 0xFE, 0xFF, 0xFF, 0x00, 0xFE, 0xFF, 0xFF, 0x7F, 
  0xFE, 0xFF, 0xFF, 0x01, 0xFF, 0xFF, 0xFF, 0x7F, 0xFC, 0xFF, 0xFF, 0x83, 
  0xFF, 0xFF, 0xFF, 0x3F, 0xFC, 0xFF, 0xFF, 0xE7, 0xFF, 0xFF, 0xFF, 0x3F, 
  0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x3F, 0xF8, 0xFF, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xFF, 0x1F, 0xF0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x0F, 
  0xF0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x0F, 0xE0, 0xFF, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xFF, 0x07, 0xE0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x07, 
  0xC0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x03, 0x80, 0xFF, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xFF, 0x01, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 
  0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0xFE, 0xFF, 0xFF, 
  0xFF, 0xFF, 0x7F, 0x00, 0x00, 0xF8, 0xFF, 0xFF, 0xFF, 0xFF, 0x1F, 0x00, 
  0x00, 0xF0, 0xFF, 0xFF, 0xFF, 0xFF, 0x0F, 0x00, 0x00, 0xE0, 0xFF, 0xFF, 
  0xFF, 0xFF, 0x07, 0x00, 0x00, 0x80, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0x00, 
  0x00, 0x00, 0xFE, 0xFF, 0xFF, 0x7F, 0x00, 0x00, 0x00, 0x00, 0xFC, 0xFF, 
  0xFF, 0x3F, 0x00, 0x00, 0x00, 0x00, 0xE0, 0xFF, 0xFF, 0x07, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, };

#define fail_width 64
#define fail_height 64
PROGMEM const unsigned char fail_bits[] = {
  0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0xFF, 
  0xFF, 0x07, 0x00, 0x00, 0x00, 0x00, 0xFC, 0xFF, 0xFF, 0x3F, 0x00, 0x00, 
  0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x80, 0xFF, 0xFF, 
  0xFF, 0xFF, 0x01, 0x00, 0x00, 0xE0, 0xFF, 0xFF, 0xFF, 0xFF, 0x07, 0x00, 
  0x00, 0xF0, 0xFF, 0xFF, 0xFF, 0xFF, 0x0F, 0x00, 0x00, 0xF8, 0xFF, 0xFF, 
  0xFF, 0xFF, 0x1F, 0x00, 0x00, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0x00, 
  0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xFF, 0x00, 0x80, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 
  0xC0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x03, 0xE0, 0xFF, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xFF, 0x07, 0xE0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x07, 
  0xF0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x0F, 0xF8, 0xFF, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xFF, 0x1F, 0xF8, 0xFF, 0xDF, 0xFF, 0xFF, 0xFB, 0xFF, 0x1F, 
  0xFC, 0xFF, 0x0F, 0xFF, 0xFF, 0xF1, 0xFF, 0x3F, 0xFC, 0xFF, 0x07, 0xFE, 
  0xFF, 0xE0, 0xFF, 0x3F, 0xFC, 0xFF, 0x03, 0xFE, 0x7F, 0xC0, 0xFF, 0x3F, 
  0xFE, 0xFF, 0x01, 0xFC, 0x1F, 0x80, 0xFF, 0x7F, 0xFE, 0xFF, 0x03, 0xF0, 
  0x1F, 0xC0, 0xFF, 0x7F, 0xFE, 0xFF, 0x07, 0xF0, 0x0F, 0xC0, 0xFF, 0x7F, 
  0xFF, 0xFF, 0x07, 0xE0, 0x07, 0xE0, 0xFF, 0xFF, 0xFF, 0xFF, 0x1F, 0x80, 
  0x01, 0xF8, 0xFF, 0xFF, 0xFF, 0xFF, 0x1F, 0x80, 0x01, 0xF8, 0xFF, 0xFF, 
  0xFF, 0xFF, 0x7F, 0x00, 0x00, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 
  0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0x80, 0xFF, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xFF, 0x01, 0x80, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x07, 
  0xE0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x07, 0xE0, 0xFF, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xFF, 0x01, 0x80, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 
  0x80, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 
  0xFF, 0xFF, 0x7F, 0x00, 0x00, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0x1F, 0x80, 
  0x01, 0xF8, 0xFF, 0xFF, 0xFF, 0xFF, 0x1F, 0xC0, 0x01, 0xF8, 0xFF, 0xFF, 
  0xFF, 0xFF, 0x0F, 0xC0, 0x07, 0xE0, 0xFF, 0xFF, 0xFE, 0xFF, 0x07, 0xE0, 
  0x0F, 0xE0, 0xFF, 0x7F, 0xFE, 0xFF, 0x01, 0xF8, 0x1F, 0xC0, 0xFF, 0x7F, 
  0xFE, 0xFF, 0x01, 0xF8, 0x1F, 0x80, 0xFF, 0x7F, 0xFC, 0xFF, 0x03, 0xFE, 
  0x7F, 0xC0, 0xFF, 0x3F, 0xFC, 0xFF, 0x07, 0xFF, 0xFF, 0xE0, 0xFF, 0x3F, 
  0xFC, 0xFF, 0x8F, 0xFF, 0xFF, 0xF1, 0xFF, 0x3F, 0xF8, 0xFF, 0xDF, 0xFF, 
  0xFF, 0xF9, 0xFF, 0x1F, 0xF8, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x1F, 
  0xF0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x0F, 0xE0, 0xFF, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xFF, 0x07, 0xE0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x07, 
  0xC0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x03, 0x80, 0xFF, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xFF, 0x01, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 
  0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0xFE, 0xFF, 0xFF, 
  0xFF, 0xFF, 0x7F, 0x00, 0x00, 0xF8, 0xFF, 0xFF, 0xFF, 0xFF, 0x1F, 0x00, 
  0x00, 0xF0, 0xFF, 0xFF, 0xFF, 0xFF, 0x0F, 0x00, 0x00, 0xE0, 0xFF, 0xFF, 
  0xFF, 0xFF, 0x07, 0x00, 0x00, 0x80, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0x00, 
  0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFC, 0xFF, 
  0xFF, 0x3F, 0x00, 0x00, 0x00, 0x00, 0xE0, 0xFF, 0xFF, 0x07, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, };

#define lifter_width 64
#define lifter_height 64
PROGMEM const unsigned char lifter_bits[] = {
  0x00, 0x00, 0xF0, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x1E, 0x00, 0xFC, 0x3F, 
  0x00, 0x78, 0x00, 0x00, 0x3E, 0x00, 0xFE, 0x7F, 0x00, 0x7C, 0x00, 0x00, 
  0x3E, 0x00, 0xFE, 0x7F, 0x00, 0x7C, 0x00, 0x00, 0x3E, 0x00, 0xFF, 0xFF, 
  0x00, 0x7C, 0x00, 0x00, 0x3E, 0x00, 0xFF, 0xFF, 0x00, 0x7C, 0x00, 0x00, 
  0x3E, 0x00, 0xFF, 0xFF, 0x00, 0x7C, 0x00, 0x00, 0x3E, 0x00, 0xFF, 0xFF, 
  0x00, 0x7C, 0x00, 0x00, 0x3E, 0x00, 0xFF, 0xFF, 0x00, 0x7C, 0x00, 0x00, 
  0x3E, 0x00, 0xFF, 0xFF, 0x00, 0x7C, 0x00, 0x00, 0x3E, 0x00, 0xFF, 0xFF, 
  0x00, 0x7C, 0x00, 0x00, 0x3E, 0x00, 0xFF, 0xFF, 0x00, 0x7C, 0x00, 0x00, 
  0x3E, 0x00, 0xFE, 0x7F, 0x00, 0x7C, 0x00, 0x00, 0x3E, 0x00, 0xFE, 0x7F, 
  0x00, 0x7C, 0x00, 0x00, 0x3E, 0x00, 0xF8, 0x1F, 0x00, 0x7C, 0x00, 0x00, 
  0x3E, 0x00, 0xF0, 0x0F, 0x00, 0x7C, 0x00, 0x00, 0x3E, 0x00, 0x00, 0x00, 
  0x00, 0x7C, 0x00, 0x00, 0x3E, 0x00, 0xFE, 0x7F, 0x00, 0x7C, 0x00, 0x00, 
  0x3E, 0x80, 0xFF, 0xFF, 0x01, 0x7C, 0x00, 0x07, 0x3E, 0xC0, 0xFF, 0xFF, 
  0x03, 0x7C, 0x80, 0x07, 0x3E, 0xC0, 0xFF, 0xFF, 0x03, 0x7C, 0x80, 0x0F, 
  0x3E, 0xE0, 0xFF, 0xFF, 0x07, 0x7C, 0xC0, 0x0F, 0x3E, 0xE0, 0xFF, 0xFF, 
  0x07, 0x7C, 0xE0, 0x1F, 0x3E, 0xE0, 0xFF, 0xFF, 0x07, 0x7C, 0xE0, 0x3F, 
  0x3E, 0xF0, 0xFF, 0xFF, 0x0F, 0x7C, 0xF0, 0x3F, 0x3E, 0xF0, 0xFF, 0xFF, 
  0x0F, 0x7C, 0xF8, 0x7F, 0x3E, 0xF0, 0xFF, 0xFF, 0x0F, 0x7C, 0xF8, 0x7F, 
  0x3E, 0xF8, 0xFF, 0xFF, 0x1F, 0x7C, 0xF0, 0x7F, 0x3E, 0xF8, 0xFF, 0xFF, 
  0x1F, 0x7C, 0x00, 0x00, 0x3E, 0xF8, 0xFF, 0xFF, 0x1F, 0x7C, 0x00, 0x00, 
  0x3E, 0xFC, 0xFF, 0xFF, 0x3F, 0x7C, 0x00, 0x00, 0x3E, 0xFC, 0xFF, 0xFF, 
  0x3F, 0x7C, 0x00, 0x00, 0x3E, 0xFC, 0xFF, 0xFF, 0x3F, 0x7C, 0x00, 0x00, 
  0x3E, 0xFE, 0xFF, 0xFF, 0x7F, 0x7C, 0xF8, 0x7F, 0x3E, 0xFE, 0xFF, 0xFF, 
  0x7F, 0x7C, 0xF8, 0x7F, 0x3E, 0xFE, 0xFF, 0xFF, 0x7F, 0x7C, 0xF0, 0x3F, 
  0x3E, 0xFF, 0xFF, 0xFF, 0xFF, 0x7C, 0xE0, 0x3F, 0x3E, 0xFF, 0xFF, 0xFF, 
  0xFF, 0x7C, 0xE0, 0x1F, 0x3E, 0xFF, 0xFF, 0xFF, 0xFF, 0x7C, 0xC0, 0x1F, 
  0x3E, 0xBF, 0xFF, 0xFF, 0x7F, 0x7C, 0xC0, 0x0F, 0x3E, 0x9E, 0xFF, 0xFF, 
  0x7D, 0x7C, 0x80, 0x07, 0x3E, 0x80, 0xFF, 0xFF, 0x01, 0x7C, 0x00, 0x07, 
  0x3E, 0x80, 0xFF, 0xFF, 0x01, 0x7C, 0x00, 0x02, 0x3E, 0x80, 0xFF, 0xFF, 
  0x01, 0x7C, 0x00, 0x00, 0x3E, 0x80, 0xFF, 0xFF, 0x01, 0x7C, 0x00, 0x00, 
  0x3E, 0x80, 0xFF, 0xFF, 0x01, 0x7C, 0x00, 0x00, 0x3E, 0x80, 0xFF, 0xFF, 
  0x01, 0x7C, 0x00, 0x00, 0x3E, 0x80, 0xFF, 0xFF, 0x01, 0x7C, 0x00, 0x00, 
  0x3E, 0x80, 0xFF, 0xFF, 0x01, 0x7C, 0x00, 0x00, 0x3E, 0x80, 0xFF, 0xFF, 
  0x01, 0x7C, 0x00, 0x00, 0x3E, 0x80, 0xFF, 0xFF, 0x01, 0x7C, 0x00, 0x00, 
  0x3E, 0x80, 0xFF, 0xFF, 0x01, 0x7C, 0x00, 0x00, 0x3E, 0x80, 0xFF, 0xFF, 
  0x01, 0x7C, 0x00, 0x00, 0x3E, 0x80, 0xFF, 0xFF, 0x01, 0x7C, 0x00, 0x00, 
  0x3E, 0x80, 0xFF, 0xFF, 0x01, 0x7C, 0x00, 0x00, 0x3E, 0x80, 0xFF, 0xFF, 
  0x01, 0x7C, 0x00, 0x00, 0x3E, 0x80, 0xFF, 0xFF, 0x01, 0x7C, 0x00, 0x00, 
  0x3E, 0x80, 0xFF, 0xFF, 0x01, 0x7C, 0x00, 0x00, 0x3E, 0x80, 0xFF, 0xFF, 
  0x01, 0x7C, 0x00, 0x00, 0x3E, 0x80, 0xFF, 0xFF, 0x01, 0x7C, 0x00, 0x00, 
  0x3E, 0x80, 0xFF, 0xFF, 0x01, 0x7C, 0x00, 0x00, 0x3E, 0x80, 0x7F, 0xFF, 
  0x01, 0x7C, 0x00, 0x00, 0x3E, 0x00, 0x7F, 0xFE, 0x00, 0x7C, 0x00, 0x00, 
  0x1E, 0x00, 0x3F, 0x7C, 0x00, 0x7C, 0x00, 0x00, };

#define mqtt_width 60
#define mqtt_height 60
PROGMEM const unsigned char mqtt_bits[] = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFE, 0xFF, 0xFF, 0xFF, 
  0xFF, 0x03, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x03, 0x00, 0x00, 
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x03, 0x00, 0x00, 0x5F, 0x5A, 0xA9, 0x55, 
  0xDA, 0x03, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x80, 0x03, 0x00, 0x00, 
  0x07, 0x00, 0x00, 0x00, 0x80, 0x03, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 
  0x80, 0x07, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x80, 0x03, 0x00, 0x00, 
  0x07, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x02, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x80, 0x07, 0x00, 
  0x0F, 0x00, 0x00, 0x00, 0x00, 0x80, 0x0F, 0x00, 0x07, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x1F, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3E, 0x00, 
  0x07, 0x00, 0x60, 0x94, 0x46, 0x69, 0x7F, 0x00, 0x0F, 0x00, 0xF8, 0xFF, 
  0xFF, 0xFF, 0x7F, 0x00, 0x0F, 0x00, 0xF8, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 
  0x07, 0x00, 0xF8, 0xFF, 0xFF, 0xFF, 0x7F, 0x00, 0x0F, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x3E, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x00, 
  0xFF, 0x7F, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0xFF, 0xFF, 0x00, 0x00, 
  0x00, 0x80, 0x0F, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x80, 0x03, 0x00, 
  0x48, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 
  0x00, 0xE0, 0xFF, 0x0F, 0x00, 0x1E, 0x00, 0x00, 0x00, 0xF0, 0xFF, 0x0F, 
  0x00, 0x1F, 0x00, 0x00, 0x00, 0xF0, 0xFF, 0x0F, 0x80, 0x0F, 0x00, 0x00, 
  0x00, 0x80, 0x56, 0x0F, 0xC0, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 
  0xE0, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0x00, 0x0F, 0xF0, 0xFF, 0xFF, 0xFF, 
  0xFF, 0x01, 0x00, 0x0F, 0xE0, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0x00, 0x0E, 
  0xE0, 0xBF, 0xDB, 0xED, 0xED, 0x01, 0x00, 0x0F, 0xC0, 0x07, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x0F, 0x80, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 
  0x00, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x1E, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x0E, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x00, 0x00, 0x1C, 0x00, 
  0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x0E, 
  0x00, 0x00, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x1E, 0x00, 
  0x00, 0x00, 0x00, 0x0E, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x0F, 
  0x00, 0x00, 0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0x0F, 0x00, 0x00, 0xFC, 0xFF, 
  0xFF, 0xFF, 0xFF, 0x0F, 0x00, 0x00, 0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0x0F, 
  0x00, 0x00, 0x90, 0x96, 0x96, 0x92, 0x96, 0x02, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  };

uint16_t screenColor = 12;

void clearScreen(uint16_t _screenColor){
  // M5.Lcd.clearDisplay();
  // if(screenColor!=_screenColor){
  //   screenColor=_screenColor;
  //   M5.Lcd.fillScreen(screenColor);
  // }
  M5.Lcd.fillScreen(WHITE);
}



void ShowOnOledLarge(char *Line1, char *Line2, char *Line3, uint16_t Pause=1,uint16_t headerColor=BLACK,ICON ico=ICON::ICO_NONE) {
  // Clear and set Oled to display 3 line info -> centered
  int pos = 1;
  clearScreen(WHITE);
  M5.Lcd.setTextColor(headerColor);
  M5.Lcd.setTextSize(2);  // Large characters 11 pixels wide
  if (Line1) {
    pos = round( ((M5.Lcd.width()-1) - (12 * strlen(Line1))) / 2 );
    M5.Lcd.setCursor(pos, 22); // 16
    M5.Lcd.print(Line1);
  }
  M5.Lcd.setTextSize(2);
  if (Line2) {
    pos = round( ((M5.Lcd.width()-1) - (12 * strlen(Line2))) / 2 );
    M5.Lcd.setCursor(pos, 44); // 16
    M5.Lcd.print(Line2);
  }
  if (Line3) {
    pos = round( ((M5.Lcd.width()-1) - (12 * strlen(Line3))) / 2 );
    M5.Lcd.setCursor(pos, 66); // 16
    M5.Lcd.print(Line3);
  }
  switch(ico){
    case ICO_DELETE:
    {
         M5.Lcd.drawXBitmap(M5.Lcd.width()/2-delete_width/2,M5.Lcd.height()/2, delete_bits, delete_width, delete_height, TFT_BLACK, TFT_WHITE);
         break;
    }
    case ICO_WIFI:
    {
         M5.Lcd.drawXBitmap(M5.Lcd.width()/2-wifi64_width/2,M5.Lcd.height()/2, wifi64_bits, wifi64_width, wifi64_height, TFT_BLACK, TFT_WHITE);
         break;
    }
    case ICO_BLE:
    {
      M5.Lcd.drawXBitmap(M5.Lcd.width()/2-BLE64_width/2,M5.Lcd.height()/2, BLE64_bits, BLE64_width, BLE64_height, TFT_BLACK, TFT_WHITE);
      break;
    }
    case ICO_LIFTER:
    {
      M5.Lcd.drawXBitmap(M5.Lcd.width()/2-lifter_width/2,M5.Lcd.height()/2, lifter_bits, lifter_width, lifter_height, TFT_BLACK, TFT_WHITE);
      break;
    }
    case ICO_FAIL:
    {
      M5.Lcd.drawXBitmap(M5.Lcd.width()/2-fail_width/2,M5.Lcd.height()/2, fail_bits, fail_width, fail_height, TFT_RED, TFT_WHITE);
      break;
    }
    case ICO_CHECK:
    {
      M5.Lcd.drawXBitmap(M5.Lcd.width()/2-check_width/2,M5.Lcd.height()/2, check_bits, check_width, check_height, TFT_GREEN, TFT_WHITE);
         break;
    }
    case ICO_MQTT:
    {
      M5.Lcd.drawXBitmap(M5.Lcd.width()/2-mqtt_width/2,M5.Lcd.height()/2, mqtt_bits, mqtt_width, mqtt_height, TFT_BLACK, TFT_WHITE);
         break;
    }
    default:
    {
      break;
    }
  }
  M5.Lcd.display();
  delay(Pause);  // Pause indicated time in ms
}

void BuildBasicOledScreen(void)
{
  // M5.Lcd.clearDisplay(); // clean the oled screen
  clearScreen(WHITE);
  M5.Lcd.setTextColor(BLACK);
  if (mqttClient.connected())
  { // show BLE icon
    M5.Lcd.drawXBitmap(M5.Lcd.width() - wifiLogo32_width-5, (fec_Icon_height - wifiLogo32_height)/2, wifiLogo32_bits, wifiLogo32_width, wifiLogo32_height, TFT_GREEN, TFT_WHITE);
  }
  else
  {
    M5.Lcd.drawXBitmap(M5.Lcd.width() - wifiLogo32_width-5, (fec_Icon_height - wifiLogo32_height)/2, wifiLogo32_bits, wifiLogo32_width, wifiLogo32_height, TFT_RED, TFT_WHITE);
  }
  if (ble_connected)
  { // show BLE icon
    M5.Lcd.drawXBitmap(M5.Lcd.width() - wifiLogo32_width - fec_Icon_width - 10, 0, fec_Icon_bits, fec_Icon_width, fec_Icon_height, TFT_WHITE, TFT_GREEN);
  }
  else
  {
    M5.Lcd.drawXBitmap(M5.Lcd.width() - wifiLogo32_width - fec_Icon_width - 10, 0, fec_Icon_bits, fec_Icon_width, fec_Icon_height, TFT_WHITE, TFT_RED);
  }
  M5.Lcd.setTextSize(3);
  M5.Lcd.setTextDatum(1);
  M5.Lcd.drawString(F("Watt\t\tRpm\t\tKph"), M5.Lcd.width() / 2, 80);
} // ---------------------------

unsigned long lastDisplayUpdateValue = 0;
bool updateDisplay=true;
// Funtion to show measurement data: Grade, Power, Cadence and Speed on Oled screen
void ShowValuesOnOled(void) {
   if(updateDisplay){BuildBasicOledScreen();updateDisplay=false;}
   if (millis() - lastDisplayUpdateValue > 100) {
    M5.Lcd.setTextColor(WHITE);
    m5.Lcd.fillRect(M5.Lcd.width()/4,20,M5.Lcd.width()/2,30,TFT_WHITE);
    M5.Lcd.fillRect(0,120,M5.Lcd.width(),25,TFT_WHITE);
    M5.Lcd.setTextColor(RED);
    char tmp[30];
    M5.Lcd.setTextSize(4);
    M5.Lcd.setTextDatum(1);
    sprintf(tmp, "%2.1f%%", gradePercentValue);
    M5.Lcd.drawString(tmp,M5.Lcd.width()/2,20);

    M5.Lcd.setTextSize(3);
    M5.Lcd.setTextDatum(1);
    sprintf(tmp, "%03d\t\t%03d\t\t%02d", PowerValue, InstantaneousCadence, int(SpeedValue + 0.5));
    M5.Lcd.drawString(tmp,M5.Lcd.width()/2,120);
    
    if(menue_Btn!=M5BUTTON::BTN_NONE){
        switch(menue_Btn){
            case M5BUTTON::BTN_A:
                  M5.Lcd.setCursor(6, 80);
                  M5.Lcd.setTextSize(2);
                  sprintf(tmp, "+    %03d     -",GradeChangeFactor);
                  M5.Lcd.setTextDatum(7);
                  M5.Lcd.drawString("GradeChangeFactor",M5.Lcd.width()/2,M5.Lcd.height()-40);
                  M5.Lcd.drawString(tmp,M5.Lcd.width()/2,M5.Lcd.height()-20);
            break;
            case M5BUTTON::BTN_B:
                  M5.Lcd.setCursor(6, 80);
                  M5.Lcd.setTextSize(2);
                  sprintf(tmp, "+    %03d     -",aRGVmax);
                  M5.Lcd.setTextDatum(7);
                  M5.Lcd.drawString("aRGVmax",M5.Lcd.width()/2,M5.Lcd.height()-40);
                  M5.Lcd.drawString(tmp,M5.Lcd.width()/2,M5.Lcd.height()-20);
            break;
            case M5BUTTON::BTN_C:
                  M5.Lcd.setCursor(6, 80);
                  M5.Lcd.setTextSize(2);
                  sprintf(tmp, "+    %03d     -",aRGVmin);
                  M5.Lcd.setTextDatum(7);
                  M5.Lcd.drawString("aRGVmin",M5.Lcd.width()/2,M5.Lcd.height()-40);
                  M5.Lcd.drawString(tmp,M5.Lcd.width()/2,M5.Lcd.height()-20);
            break;
            default:
            break;
        }
    }
    M5.Lcd.display();
    lastDisplayUpdateValue = millis();
   }
}// -----------------------------------