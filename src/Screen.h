
#include <M5Core2.h>


//https://www.mischianti.org/2021/07/14/ssd1306-oled-display-draw-images-splash-and-animations-2/#Image_format

uint8_t bluetooth_icon16x16[] PROGMEM = {
  0b00000000, 0b00000000, //                 
  0b00000001, 0b10000000, //        ##       
  0b00000001, 0b11000000, //        ###      
  0b00000001, 0b01100000, //        # ##     
  0b00001001, 0b00110000, //     #  #  ##    
  0b00001101, 0b00110000, //     ## #  ##    
  0b00000111, 0b01100000, //      ### ##     
  0b00000011, 0b11000000, //       ####      
  0b00000001, 0b10000000, //        ##       
  0b00000011, 0b11000000, //       ####      
  0b00000111, 0b01100000, //      ### ##     
  0b00001101, 0b00110000, //     ## #  ##    
  0b00001001, 0b00110000, //     #  #  ##    
  0b00000001, 0b01100000, //        # ##     
  0b00000001, 0b11000000, //        ###      
  0b00000001, 0b10000000, //        ##       
};


// 'mqtt-ver__small', 32x28px
uint8_t mqtt_icon32x28 [112] PROGMEM = {
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0xf1, 0xff, 0xff, 0xfc, 0x39, 0xff, 
	0xff, 0xff, 0x1f, 0xff, 0xff, 0x9f, 0x8f, 0xff, 0xff, 0x83, 0xc7, 0xff, 0xff, 0xe1, 0xe7, 0xff, 
	0xff, 0xfc, 0x73, 0xff, 0xff, 0xfe, 0x73, 0xff, 0xff, 0x8f, 0x39, 0xff, 0xff, 0x87, 0x19, 0xff, 
	0xff, 0x83, 0x99, 0xff, 0xff, 0x81, 0x9d, 0xff, 0xff, 0x81, 0x9d, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xef, 0xb8, 0xc1, 0x87, 0xe7, 0x37, 0x77, 0xcf, 
	0xe7, 0x2f, 0x37, 0xdf, 0xea, 0x8f, 0x37, 0xdf, 0xe8, 0xaf, 0x37, 0xdf, 0xed, 0xb7, 0x77, 0xdf, 
	0xff, 0xb8, 0x77, 0xdf, 0xff, 0xff, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
};


//https://www.thisisant.com/company/activity-icons/
//https://www.freefileconvert.com/bmp-xbm
#define pwr_Icon_width 50
#define pwr_Icon_height 49
PROGMEM const unsigned char pwr_Icon_bits[] = {
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x03, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
  0xFF, 0x03, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x03, 0xFF, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xFF, 0x03, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x03, 0xFF, 
  0xFF, 0xFF, 0xFF, 0xF8, 0xFF, 0x03, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0xFF, 
  0x03, 0xFF, 0xFF, 0xFF, 0x7F, 0xE0, 0xFF, 0x03, 0xFF, 0xFF, 0xFF, 0x7F, 
  0xE0, 0xFF, 0x03, 0xFF, 0xFF, 0xFF, 0x7F, 0xE0, 0xFF, 0x03, 0xFF, 0xFF, 
  0xFF, 0xEF, 0xF0, 0xFF, 0x03, 0xFF, 0xFF, 0xFF, 0xC3, 0xFF, 0xFF, 0x03, 
  0xFF, 0xFF, 0xFF, 0x80, 0xFF, 0xFF, 0x03, 0xFF, 0xFF, 0x7F, 0x00, 0xFF, 
  0xFF, 0x03, 0xFF, 0xFF, 0x3F, 0x3C, 0xC0, 0xFF, 0x03, 0xFF, 0xFF, 0x0F, 
  0x7F, 0x80, 0xFF, 0x03, 0xFF, 0xFF, 0x8F, 0xFF, 0xD5, 0xFF, 0x03, 0xFF, 
  0xFF, 0x0F, 0xFF, 0xFF, 0xFF, 0x03, 0xFF, 0xFF, 0x3F, 0xFE, 0xFF, 0xFF, 
  0x03, 0xFF, 0xFF, 0x3F, 0xF8, 0xFB, 0xFF, 0x03, 0xFF, 0x03, 0xFF, 0xF8, 
  0xC0, 0xFF, 0x03, 0xFF, 0x01, 0xFC, 0x31, 0x00, 0xFF, 0x03, 0xFF, 0x70, 
  0xF8, 0x11, 0x1C, 0xFE, 0x03, 0x7F, 0xFC, 0xF0, 0x18, 0x3F, 0xFE, 0x03, 
  0x7F, 0xFE, 0xF1, 0x98, 0x7F, 0xFC, 0x03, 0x7F, 0xFE, 0xF3, 0x8C, 0x7F, 
  0xFC, 0x03, 0x3F, 0xFE, 0x73, 0x8C, 0xFF, 0xFC, 0x03, 0x3F, 0xFE, 0x63, 
  0x8C, 0xFF, 0xFC, 0x03, 0x7F, 0xFC, 0x31, 0x9E, 0x7F, 0xFC, 0x03, 0x7F, 
  0xFC, 0x31, 0x1E, 0x3F, 0xFE, 0x03, 0xFF, 0x70, 0x38, 0x3F, 0x1C, 0xFE, 
  0x03, 0xFF, 0x01, 0x1C, 0x3F, 0x00, 0xFF, 0x03, 0xFF, 0x03, 0xFF, 0xFF, 
  0xC0, 0xFF, 0x03, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x03, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xFF, 0xFF, 0x03, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x03, 
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x03, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
  0xFF, 0x03, 0x7F, 0x00, 0x71, 0x1C, 0x01, 0xFC, 0x03, 0xFF, 0x00, 0x72, 
  0x18, 0x00, 0xFC, 0x03, 0xFF, 0x14, 0x22, 0x88, 0xF9, 0xF8, 0x03, 0x7F, 
  0x38, 0x22, 0x88, 0x50, 0xF8, 0x03, 0xFF, 0x00, 0x06, 0x81, 0x01, 0xFC, 
  0x03, 0x7F, 0x00, 0x07, 0xC1, 0x01, 0xFC, 0x03, 0xFF, 0xFC, 0x87, 0xC3, 
  0xF8, 0xFC, 0x03, 0x7F, 0xFC, 0x8F, 0xE3, 0xF1, 0xF8, 0x03, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xFF, 0xFF, 0x03, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x03, 
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x03, };


#define fec_Icon_width 40
#define fec_Icon_height 40
PROGMEM const unsigned char fec_Icon_bits[] = {
  0xFC, 0xFF, 0xFF, 0xFF, 0x3F, 0xFE, 0xFF, 0xFF, 0xFF, 0x7F, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xC7, 0xFF, 0xFF, 0xFF, 0xFF, 0x83, 
  0xFF, 0xFF, 0xFF, 0xFF, 0x87, 0xFF, 0xFF, 0xFF, 0xFF, 0xC7, 0xFF, 0xFF, 
  0xFF, 0x7F, 0xFC, 0xFF, 0xFF, 0xFF, 0x1F, 0xF8, 0xFF, 0xFF, 0xFF, 0x8F, 
  0xB3, 0xFF, 0xFF, 0xFF, 0xE7, 0x07, 0xFF, 0xFF, 0xFF, 0xE3, 0xDF, 0xFF, 
  0xFF, 0xFF, 0xE7, 0xFF, 0xFF, 0xFF, 0xFF, 0x8F, 0xFF, 0xFF, 0xFF, 0x87, 
  0x1F, 0x07, 0xFF, 0xFF, 0x03, 0x3E, 0x03, 0xFE, 0xFF, 0xF9, 0x3C, 0xF9, 
  0xFC, 0xFF, 0xFC, 0x9C, 0xF9, 0xF9, 0xFF, 0xFC, 0x9D, 0xFD, 0xF9, 0xFF, 
  0xCC, 0xDC, 0xFC, 0xF9, 0xFF, 0x84, 0xCC, 0xFD, 0xF9, 0xFF, 0x01, 0xCC, 
  0xF9, 0xFC, 0xFF, 0x01, 0xE6, 0x63, 0xFC, 0xFF, 0x01, 0xFE, 0x07, 0xFF, 
  0xFF, 0x00, 0xFC, 0xFF, 0xFF, 0x7F, 0x00, 0xF8, 0xFF, 0xFF, 0x3F, 0x00, 
  0xF0, 0xFF, 0xFF, 0x3F, 0x00, 0xE0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x5F, 
  0x32, 0xF3, 0x4F, 0xFE, 0x1F, 0x10, 0xF0, 0x03, 0xFC, 0x9F, 0x9F, 0xFF, 
  0xE3, 0xF8, 0x1F, 0x10, 0xF0, 0xF3, 0xFF, 0x1F, 0x10, 0x1D, 0xF2, 0xFD, 
  0x9F, 0x1F, 0xF2, 0x03, 0xF8, 0x9F, 0x1F, 0xE0, 0x07, 0xFC, 0xFE, 0xFF, 
  0xFF, 0xFF, 0xFF, 0xFC, 0xFF, 0xFF, 0xFF, 0x3F, };





//https://diyprojects.io/ttgo-t-watch-display-xbm-tft_espi-lvgl-images-esp32-arduino/
#define wifiLogo_width 32
#define wifiLogo_height 22
PROGMEM const unsigned char wifiLogo_bits[] = {
  0x00, 0xF8, 0x1F, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0xE0, 0xFF, 0xFF, 0x07, 
  0xF0, 0xFF, 0xFF, 0x0F, 0xFC, 0x07, 0xE0, 0x3F, 0xFE, 0x00, 0x00, 0x7F, 
  0x3F, 0x00, 0x00, 0xFC, 0x1E, 0x80, 0x01, 0x78, 0x04, 0xFC, 0x3F, 0x30, 
  0x00, 0xFF, 0xFF, 0x00, 0x80, 0xFF, 0xFF, 0x01, 0xC0, 0x1F, 0xF8, 0x03, 
  0xC0, 0x03, 0xC0, 0x03, 0x80, 0x01, 0x80, 0x01, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0xE0, 0x07, 0x00, 0x00, 0xF8, 0x1F, 0x00, 0x00, 0xF8, 0x1F, 0x00, 
  0x00, 0xF0, 0x0F, 0x00, 0x00, 0xE0, 0x07, 0x00, 0x00, 0xC0, 0x01, 0x00, 
  0x00, 0x00, 0x01, 0x00, };


uint16_t screenColor = 12;

void clearScreen(uint16_t _screenColor){
  // M5.Lcd.clearDisplay();
  // if(screenColor!=_screenColor){
  //   screenColor=_screenColor;
  //   M5.Lcd.fillScreen(screenColor);
  // }
  M5.Lcd.fillScreen(WHITE);
}



void ShowOnOledLarge(char *Line1, char* icon,int16_t w, int16_t h,uint16_t Pause=1,uint16_t headerColor=BLACK){
  clearScreen(WHITE);
  // M5.Lcd.clearDisplay();
  M5.Lcd.setTextColor(headerColor);
  // M5.Lcd.drawXBitmap(M5.Lcd.width()-wifiLogo_width, 0, icon ,w, h, TFT_BLACK,TFT_WHITE);

  if (Line1) {
     int pos = round( ((M5.Lcd.width()-1) - (12 * strlen(Line1))) / 2 );
    M5.Lcd.setCursor(pos, 4); // 16
    M5.Lcd.print(Line1);
  }
  M5.Lcd.display();
  delay(Pause);  // Pause indicated time in ms
}

void ShowOnOledLarge(String Line1, char* icon,int16_t w, int16_t h,uint16_t Pause=1,uint16_t headerColor=BLACK){
  clearScreen(WHITE);  // M5.Lcd.clearDisplay();
  M5.Lcd.setTextColor(headerColor);
  // M5.Lcd.drawXBitmap(M5.Lcd.width()-wifiLogo_width, 0, icon ,w, h, TFT_BLACK,TFT_WHITE);
  if (Line1) {
     int pos = round( ((M5.Lcd.width()-1) - (12 * Line1.length())) / 2 );
    M5.Lcd.setCursor(pos, 4); // 16
    M5.Lcd.print(Line1);
  }
  M5.Lcd.display();
  delay(Pause);  // Pause indicated time in ms
}



void ShowOnOledLarge(char *Line1, char *Line2, char *Line3, uint16_t Pause=1,uint16_t headerColor=BLACK) {
  // Clear and set Oled to display 3 line info -> centered
  int pos = 1;
  clearScreen(WHITE);
  M5.Lcd.setTextColor(headerColor);
  M5.Lcd.setTextSize(2);  // Large characters 11 pixels wide
  if (Line1) {
    pos = round( ((M5.Lcd.width()-1) - (12 * strlen(Line1))) / 2 );
    M5.Lcd.setCursor(pos, 22); // 16
    M5.Lcd.print(Line1);
  }
  M5.Lcd.setTextSize(2);
  if (Line2) {
    pos = round( ((M5.Lcd.width()-1) - (12 * strlen(Line2))) / 2 );
    M5.Lcd.setCursor(pos, 44); // 16
    M5.Lcd.print(Line2);
  }
  if (Line3) {
    pos = round( ((M5.Lcd.width()-1) - (12 * strlen(Line3))) / 2 );
    M5.Lcd.setCursor(pos, 66); // 16
    M5.Lcd.print(Line3);
  }
  M5.Lcd.display();
  delay(Pause);  // Pause indicated time in ms
}

void BuildBasicOledScreen(void)
{
  // M5.Lcd.clearDisplay(); // clean the oled screen
  clearScreen(WHITE);
  M5.Lcd.setTextColor(BLACK);
  if (mqttClient.connected())
  { // show BLE icon
    M5.Lcd.drawXBitmap(M5.Lcd.width() - wifiLogo_width, (fec_Icon_height - wifiLogo_height)/2, wifiLogo_bits, wifiLogo_width, wifiLogo_height, TFT_GREEN, TFT_WHITE);
  }
  else
  {
    M5.Lcd.drawXBitmap(M5.Lcd.width() - wifiLogo_width, (fec_Icon_height - wifiLogo_height)/2, wifiLogo_bits, wifiLogo_width, wifiLogo_height, TFT_RED, TFT_WHITE);
  }
  if (ble_connected)
  { // show BLE icon
    M5.Lcd.drawXBitmap(M5.Lcd.width() - wifiLogo_width - fec_Icon_width - 10, 0, fec_Icon_bits, fec_Icon_width, fec_Icon_height, TFT_WHITE, TFT_GREEN);
  }
  else
  {
    M5.Lcd.drawXBitmap(M5.Lcd.width() - wifiLogo_width - fec_Icon_width - 10, 0, fec_Icon_bits, fec_Icon_width, fec_Icon_height, TFT_WHITE, TFT_RED);
  }
  M5.Lcd.setTextSize(3);
  M5.Lcd.setTextDatum(1);
  M5.Lcd.drawString(F("Watt\t\tRpm\t\tKph"), M5.Lcd.width() / 2, 80);
} // ---------------------------

unsigned long lastDisplayUpdateValue = 0;
bool updateDisplay=true;
// Funtion to show measurement data: Grade, Power, Cadence and Speed on Oled screen
void ShowValuesOnOled(void) {
   if(updateDisplay){BuildBasicOledScreen();updateDisplay=false;}
   if (millis() - lastDisplayUpdateValue > 100) {
    M5.Lcd.setTextColor(WHITE);
    M5.Lcd.drawString("           ",M5.Lcd.width()/2,20);
    M5.Lcd.drawString("                 ",M5.Lcd.width()/2,120);
    M5.Lcd.setTextColor(RED);
    char tmp[30];
    M5.Lcd.setTextSize(4);
    M5.Lcd.setTextDatum(1);
    sprintf(tmp, "%2.1f%%", gradePercentValue);
    M5.Lcd.drawString(tmp,M5.Lcd.width()/2,20);

    M5.Lcd.setTextSize(3);
    M5.Lcd.setTextDatum(1);
    sprintf(tmp, "%03d\t\t%03d\t\t%02d", PowerValue, InstantaneousCadence, int(SpeedValue + 0.5));
    M5.Lcd.drawString(tmp,M5.Lcd.width()/2,120);
    
    if(menue_Btn!=M5BUTTON::NONE){
        switch(menue_Btn){
            case M5BUTTON::BTN_A:
                  M5.Lcd.setCursor(6, 80);
                  M5.Lcd.setTextSize(2);
                  sprintf(tmp, "+    %03d     -",GradeChangeFactor);
                  M5.Lcd.setTextDatum(7);
                  M5.Lcd.drawString("GradeChangeFactor",M5.Lcd.width()/2,M5.Lcd.height()-40);
                  M5.Lcd.drawString(tmp,M5.Lcd.width()/2,M5.Lcd.height()-20);
            break;
            case M5BUTTON::BTN_B:
                  M5.Lcd.setCursor(6, 80);
                  M5.Lcd.setTextSize(2);
                  sprintf(tmp, "+    %03d     -",aRGVmax);
                  M5.Lcd.setTextDatum(7);
                  M5.Lcd.drawString("aRGVmax",M5.Lcd.width()/2,M5.Lcd.height()-40);
                  M5.Lcd.drawString(tmp,M5.Lcd.width()/2,M5.Lcd.height()-20);
            break;
            case M5BUTTON::BTN_C:
                  M5.Lcd.setCursor(6, 80);
                  M5.Lcd.setTextSize(2);
                  sprintf(tmp, "+    %03d     -",aRGVmin);
                  M5.Lcd.setTextDatum(7);
                  M5.Lcd.drawString("aRGVmin",M5.Lcd.width()/2,M5.Lcd.height()-40);
                  M5.Lcd.drawString(tmp,M5.Lcd.width()/2,M5.Lcd.height()-20);
            break;
            default:
            break;
        }
    }
    M5.Lcd.display();
    lastDisplayUpdateValue = millis();
   }
}// -----------------------------------